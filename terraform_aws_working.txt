Terraform + Aws

1) download and install terraform unzip it and copy the address and set it to environment variables

windows << edit environment variables << environment variables << path << double -click New << add the path << open cmd and type (terraform version) to validate

2) download and install aws cli << open cmd and type (aws --version) to validate

3) create aws free account

i) After root user is created add MFA
ii) Go to Users << create user << Select add user to group option << create group (search admin and select policy name with AdministratorAccess and 	
Description with Provides full access to AWS services and resources).
iii) Create user
iv) Logout from root user and login using the newly created user << Add MFA 

4) OPen Visual Code << create a directory where all your files will be kept (TF-AWS) 

5) Set the environment path
$env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine")

6) run (aws iam list-users)
It would give some key credentials related error To fix this go to AWS Console << Users << select the available user(tf-user) go to Security credentials
 << Create Acces Key << Command Line Interface (CLI) << give any tag name << Create access key.
 
7) set the environment for access key
$Env:AWS_ACCESS_KEY_ID="AKIA5FUFRZJTOGBEDBLZ"
$Env:AWS_SECRET_ACCESS_KEY="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"

8) Run (aws iam list-users) it will generate below output
{
    "Users": [
        {
            "Path": "/",
            "UserName": "tf-user",
            "UserId": "AIDA5FUFRZJTLZMXVPB7O",
            "Arn": "arn:aws:iam::905444444774:user/tf-user",
            "CreateDate": "2025-06-19T13:59:58+00:00",
            "PasswordLastUsed": "2025-06-19T14:03:38+00:00"
        }
    ]
}


8) Let's create a EC2 instance first with console

Go to EC2 << Launch Instance << Name << AMI (which OS to be used in this case linux) << Instance type (t3.micro as this is free) << Key pair << Create key pair
<< Key pair name << Key pair type (RSA) << private key format (.pem) this would be download file a pem file << Network Settings << Create security group << Allow SSH traffic(Anywhere)
<< Select all other options as default << Launch instance..


 9) For creating an instance with the help of terraform follow below steps

(i) Add extension required to code for terraform. Find the extension tab in visual code and search (HarshiCorp terraform) and then select install
(ii) Go to (https://registry.terraform.io/browse/providers) and then go to AWS providers << then use provider 
(iii) Create another directory inside TF-AWS < aws-ec2.
(iv) After creating the directory create a .tf file and include the sample code from the teraform registry provider.



10) After copying the code make necessary changes to the code as required like AMI Id, instance class, location etc...

terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = "6.0.0"
    }
  }
}

provider "aws" {
  # Configuration options
 region = "eu-north-1"
}

resource "aws_instance" "mytestserver2" {
  ami = "ami-0989038dff76173d3"
  instance_type = "t3.micro"

  tags = {
    Name = "mytestserver2"
  }
}

11) To execute this code you need to intialize (init) the terraform package so that AWS is aware and can make necessary changes from here

On the sub-directory(aws-ec2) created under main folder (TF-AWS) right click and run 
(i) terraform init - to intialize provider plugins
(ii) teraform validate - to validate the syntax of the code.
(iii) terraform plan - to compile the terraform code and look for any errors
(iv) terraform apply - this will use the above code and create the instance.
(v) terraform destroy - this will destroy all the instance running on the AWS environment


12) We can also move the .tfstate file in cloud through which it can be accessed globally

==> .tfstate or terraform state helps terraform to know the current values of the parameters used (e.g if you change the instance class from micro to nano it will first
delete the current instance and the new instance will be create with nano class.



13.) Terraform Variables

A variable in terraform is used to store the values of resources which needs to used in mulitples places (e.g region,resources,ami, etc...)

provider "aws" {																		
  # Configuration options																
 region = var.region 																	
}																						

====>>>  Here under provider block the "region" can't be change under this 
	     block as "region" is aws parameter hence we can create a file 
		 "region.tf" and inside that file we have varible declared and that
		  variable would be called using "var.region".
		  



resource "aws_instance" "mytestserver1" {								
  ami           = var.ami_linux                                         
  instance_type = var.instance_type_micro                               
                                                                        
  tags = {
    Name = "mytestserver1"
  }
}

====>>>  Here under resource block the "ami" and "instance_type" parameter can't be renamed 
  block under "resource" are those are aws predefined parameter.We can create a file 
 "ami.tf" and "instance.tf" inside that file we have varible declared and that
  variable would be called using "var.ami_linux" and "var.instance_type_micro".
 
---------------------------------------------------------------------------------


resource "aws_instance" "mytestserver2" {								
  ami           = var.ami_windows                                       
  instance_type = var.instance_type_nano                                
                                                                        
  tags = {
    Name = "mytestserver2"
  }
}

====>>>  Here under resource block the "ami" and "instance_type" parameter can't be renamed 
  block under "resource" are those are aws predefined parameter.We can create a file 
 "ami.tf" and "instance.tf" inside that file we have varible declared and that
  variable would be called using "var.ami_windows" and "var.instance_type_nano".

==========================================================================================================================================

(Note :- Inside "ami.tf" we have two variables)

1.)

variable "ami_linux" {
  description = "AMI ID for Linux instances"
  type        = string
  default     = "ami-05fcfb9614772f051" # Example AMI ID, replace with a valid one for your region
  
}

2.)

variable "ami_windows" {
  description = "AMI ID for Windows instances"
  type        = string
  default     = "ami-01998fe5b868df6e3" # Example AMI ID, replace with a valid one for your region
  
}

==============================================================================================================================================

(Note :- Inside "instance.tf" we have two variables)

1.) 

variable "instance_type_micro" {
  description = "Type of EC2 instance"
  type        = string
  default     = "t3.micro"
  }

2.)

variable "instance_type_nano" {
  description = "Type of EC2 instance"
  type        = string
  default     = "t3.nano"
  }
  

14. For creating bucket 

resource "aws_s3_bucket" "mybucket" {
  bucket = "mybucketdemo1725
}


"mybucket" is the block name and inside the block 